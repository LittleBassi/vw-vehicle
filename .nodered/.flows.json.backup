[{"id":"4d2cef44c99dd5b5","type":"tab","label":"Flow 1","disabled":false,"info":"","env":[]},{"id":"6aa306b5ec5d1a9c","type":"inject","z":"4d2cef44c99dd5b5","name":"Seed Root","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":220,"y":180,"wires":[["9e9f937f8a2ab6d8"]]},{"id":"9e9f937f8a2ab6d8","type":"function","z":"4d2cef44c99dd5b5","name":"Root Function","func":"const bcrypt = global.get(\"bcrypt\");\n\nlet users = global.get(\"users\") || [];\n\nconst hashed = bcrypt.hashSync(\"root123\", 10);\n\nusers = users.filter(u => u.username !== \"root\");\n\nusers.push({\n    id: 1,\n    username: \"root\",\n    password: hashed,\n    role: \"admin\"\n});\n\nglobal.set(\"users\", users, \"file\");\n\nmsg.payload = \"Usuário root atualizado/reescrito com sucesso\";\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":180,"wires":[["b65a4e8e141c826a"]]},{"id":"b65a4e8e141c826a","type":"debug","z":"4d2cef44c99dd5b5","name":"Root Output","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":590,"y":180,"wires":[]},{"id":"login-http-in","type":"http in","z":"4d2cef44c99dd5b5","name":"Login JWT","url":"/auth/login","method":"post","upload":false,"swaggerDoc":"","x":180,"y":300,"wires":[["login-function"]]},{"id":"login-function","type":"function","z":"4d2cef44c99dd5b5","name":"Validate Login","func":"const bcrypt = global.get(\"bcrypt\");\nconst jwt = global.get(\"jwt\");\nconst secret = global.get(\"jwtSecret\");\n\nconst { username, password } = msg.payload;\nconst users = global.get(\"users\") || [];\n\nconst user = users.find(u => u.name === username);\nif (!user || !bcrypt.compareSync(password, user.password)) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Usuário ou senha inválidos\" };\n    return msg;\n}\n\nconst token = jwt.sign(\n    { uuid: user.uuid, name: user.name, isRoot: user.isRoot },\n    secret,\n    { expiresIn: \"1h\" }\n);\n\nmsg.payload = { token };\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":300,"wires":[["login-http-response"]]},{"id":"login-http-response","type":"http response","z":"4d2cef44c99dd5b5","name":"HTTP Response","statusCode":"","headers":{},"x":620,"y":300,"wires":[]},{"id":"inject-seeder","type":"inject","z":"4d2cef44c99dd5b5","name":"Seed Data","props":[],"repeat":"","crontab":"","once":true,"onceDelay":"0.5","topic":"","x":210,"y":240,"wires":[["function-seeder"]]},{"id":"function-seeder","type":"function","z":"4d2cef44c99dd5b5","name":"Seeder Function","func":"const bcrypt = global.get('bcrypt');\n\nconst users = [\n    {\n        uuid: global.get('uuidv4')(),\n        creationDate: new Date().toISOString(),\n        updatedDate: new Date().toISOString(),\n        name: \"root\",\n        password: bcrypt.hashSync(\"root123\", 10),\n        isActived: true,\n        isRoot: true\n    }\n];\n\nconst colors = [\n    { uuid: global.get('uuidv4')(), colorName: \"Preto\" },\n    { uuid: global.get('uuidv4')(), colorName: \"Branco\" },\n    { uuid: global.get('uuidv4')(), colorName: \"Vermelho\" },\n    { uuid: global.get('uuidv4')(), colorName: \"Cinza\" },\n    { uuid: global.get('uuidv4')(), colorName: \"Azul\" }\n];\n\nconst models = [\n    { uuid: global.get('uuidv4')(), modelName: \"T-Cross\" },\n    { uuid: global.get('uuidv4')(), modelName: \"Nivus\" },\n    { uuid: global.get('uuidv4')(), modelName: \"Polo\" },\n    { uuid: global.get('uuidv4')(), modelName: \"Virtus\" },\n    { uuid: global.get('uuidv4')(), modelName: \"Saveiro\" },\n    { uuid: global.get('uuidv4')(), modelName: \"Track\" }\n];\n\nconst vehicles = [];\n\nglobal.set('users', users);\nglobal.set('colors', colors);\nglobal.set('models', models);\nglobal.set('vehicles', vehicles);\n\nmsg.payload = {\n    users,\n    colors,\n    models,\n    vehicles\n};\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":240,"wires":[["debug-seeder"]]},{"id":"debug-seeder","type":"debug","z":"4d2cef44c99dd5b5","name":"Seeder Output","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":610,"y":240,"wires":[]},{"id":"http-colors-in","type":"http in","z":"4d2cef44c99dd5b5","name":"GET Colors","url":"/colors","method":"get","upload":false,"skipBodyParsing":false,"swaggerDoc":"","x":210,"y":420,"wires":[["cc701bb638327e3c"]]},{"id":"fn-colors","type":"function","z":"4d2cef44c99dd5b5","name":"Get Colors","func":"const colors = global.get('colors') || [];\nmsg.payload = colors;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":550,"y":420,"wires":[["http-colors-out"]]},{"id":"http-colors-out","type":"http response","z":"4d2cef44c99dd5b5","name":"Return Colors","statusCode":"","headers":{},"x":740,"y":420,"wires":[]},{"id":"http-models-in","type":"http in","z":"4d2cef44c99dd5b5","name":"GET Models","url":"/models","method":"get","upload":false,"skipBodyParsing":false,"swaggerDoc":"","x":210,"y":540,"wires":[["c98356542525ef49"]]},{"id":"fn-models","type":"function","z":"4d2cef44c99dd5b5","name":"Get Models","func":"const models = global.get('models') || [];\nmsg.payload = models;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":550,"y":540,"wires":[["http-models-out"]]},{"id":"http-models-out","type":"http response","z":"4d2cef44c99dd5b5","name":"Return Models","statusCode":"","headers":{},"x":740,"y":540,"wires":[]},{"id":"cae782b06d5672c3","type":"function","z":"4d2cef44c99dd5b5","name":"root-mw","func":"const jwt = global.get(\"jwt\");\nconst secret = global.get(\"jwtSecret\");\nconst users = global.get(\"users\") || [];\n\nconst authHeader = msg.req.headers.authorization || msg.req.headers.Authorization || \"\";\nconst token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : null;\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"missing_token\" };\n    return [null, msg];\n}\n\ntry {\n    const decoded = jwt.verify(token, secret);\n    const user = users.find(u => u.uuid === decoded.uuid);\n    if (!user || !user.isRoot) {\n        msg.statusCode = 401;\n        msg.payload = { error: \"invalid_token\" };\n        return [null, msg];\n    }\n    msg.user = user;\n    return [msg, null];\n} catch(e) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"invalid_token\" };\n    return [null, msg];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":360,"y":720,"wires":[["6dbd47320ee5b7fb"],["a8be7bc9593fe815"]]},{"id":"c6c57a61431b82d1","type":"http in","z":"4d2cef44c99dd5b5","name":"GET Users","url":"/users","method":"get","upload":false,"skipBodyParsing":false,"swaggerDoc":"","x":200,"y":720,"wires":[["cae782b06d5672c3"]]},{"id":"6dbd47320ee5b7fb","type":"function","z":"4d2cef44c99dd5b5","name":"Get users","func":"const users = global.get(\"users\") || [];\nmsg.payload = users.map(u => {\n    const { password, ...rest } = u;\n    return rest;\n});\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":540,"y":720,"wires":[["81f4078e4f8138f5"]]},{"id":"81f4078e4f8138f5","type":"http response","z":"4d2cef44c99dd5b5","name":"Return Users","statusCode":"","headers":{},"x":710,"y":720,"wires":[]},{"id":"c1ea4346de29e341","type":"http in","z":"4d2cef44c99dd5b5","name":"POST Users","url":"/users","method":"post","upload":false,"skipBodyParsing":false,"swaggerDoc":"","x":210,"y":840,"wires":[["34279054f8b0a7b8"]]},{"id":"f828bb1966cd2d36","type":"http in","z":"4d2cef44c99dd5b5","name":"GET User ID","url":"/users/:uuid","method":"get","upload":false,"skipBodyParsing":false,"swaggerDoc":"","x":210,"y":960,"wires":[["ab36a5b11951a335"]]},{"id":"d9e48ea2429b3386","type":"http in","z":"4d2cef44c99dd5b5","name":"PUT User ID","url":"/users/:uuid","method":"put","upload":false,"skipBodyParsing":false,"swaggerDoc":"","x":210,"y":1080,"wires":[["4d82a99cf72e1cf7"]]},{"id":"f4df5b7746317cac","type":"function","z":"4d2cef44c99dd5b5","name":"Post Users","func":"const body = msg.req.body || {};\nconst { name, password, isActived, isRoot } = body;\nif (!name || !password) {\n    msg.statusCode = 400; msg.payload = { error: \"name_password_required\" }; return msg;\n}\nlet users = global.get(\"users\") || [];\nif (users.some(u => u.name === name)) {\n    msg.statusCode = 409; msg.payload = { error: \"name_taken\" }; return msg;\n}\nconst uuid = global.get(\"uuidv4\")();\nconst bcrypt = global.get(\"bcrypt\");\nconst now = new Date().toISOString();\nconst user = {\n    uuid,\n    creationDate: now,\n    updatedDate: now,\n    name,\n    password: bcrypt.hashSync(password, 10),\n    isActived: !!isActived,\n    isRoot: !!isRoot\n};\nusers.push(user);\nglobal.set(\"users\", users);\nconst { password: pwd, ...resp } = user;\nmsg.payload = resp;\nmsg.statusCode = 201;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":550,"y":840,"wires":[["955b898af532eab0"]]},{"id":"955b898af532eab0","type":"http response","z":"4d2cef44c99dd5b5","name":"Return Users","statusCode":"","headers":{},"x":730,"y":840,"wires":[]},{"id":"9fd5383d259d2898","type":"function","z":"4d2cef44c99dd5b5","name":"Get User ID","func":"const uuid = msg.req.params.uuid;\nconst users = global.get(\"users\") || [];\nconst user = users.find(u => u.uuid === uuid);\nif (!user) { msg.statusCode = 404; msg.payload = { error: \"not_found\" }; return msg; }\nconst { password, ...resp } = user;\nmsg.payload = resp;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":550,"y":960,"wires":[["89ee4cf8ca98fc36"]]},{"id":"89ee4cf8ca98fc36","type":"http response","z":"4d2cef44c99dd5b5","name":"Return Users","statusCode":"","headers":{},"x":730,"y":960,"wires":[]},{"id":"706c9901b957fe7d","type":"function","z":"4d2cef44c99dd5b5","name":"Put User ID","func":"const uuid = msg.req.params.uuid;\nconst body = msg.req.body || {};\nlet users = global.get(\"users\") || [];\nconst idx = users.findIndex(u => u.uuid === uuid);\nif (idx === -1) { msg.statusCode = 404; msg.payload = { error: \"not_found\" }; return msg; }\n\nconst user = users[idx];\nif (body.name) user.name = body.name;\nif (typeof body.isActived !== \"undefined\") user.isActived = !!body.isActived;\nif (typeof body.isRoot !== \"undefined\") user.isRoot = !!body.isRoot;\nif (body.password) {\n    const bcrypt = global.get(\"bcrypt\");\n    user.password = bcrypt.hashSync(body.password, 10);\n}\nuser.updatedDate = new Date().toISOString();\nusers[idx] = user;\nglobal.set(\"users\", users);\nconst { password, ...resp } = user;\nmsg.payload = resp;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":550,"y":1080,"wires":[["fdfcca1b48277c28"]]},{"id":"fdfcca1b48277c28","type":"http response","z":"4d2cef44c99dd5b5","name":"Return Users","statusCode":"","headers":{},"x":730,"y":1080,"wires":[]},{"id":"736f481b7f3b600a","type":"http in","z":"4d2cef44c99dd5b5","name":"DELETE User ID","url":"/users/:uuid","method":"delete","upload":false,"skipBodyParsing":false,"swaggerDoc":"","x":220,"y":1200,"wires":[["5839d8e37699fa83"]]},{"id":"2aa752f25f999e78","type":"function","z":"4d2cef44c99dd5b5","name":"Delete User ID","func":"const uuid = msg.req.params.uuid;\nlet users = global.get(\"users\") || [];\nconst idx = users.findIndex(u => u.uuid === uuid);\nif (idx === -1) { msg.statusCode = 404; msg.payload = { error: \"not_found\" }; return msg; }\nusers.splice(idx, 1);\nglobal.set(\"users\", users);\nmsg.payload = { ok: true };\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":560,"y":1200,"wires":[["d5711fc8676730d3"]]},{"id":"d5711fc8676730d3","type":"http response","z":"4d2cef44c99dd5b5","name":"Return Users","statusCode":"","headers":{},"x":730,"y":1200,"wires":[]},{"id":"a8be7bc9593fe815","type":"http response","z":"4d2cef44c99dd5b5","name":"Unauthorized","statusCode":"","headers":{},"x":550,"y":780,"wires":[]},{"id":"c98356542525ef49","type":"function","z":"4d2cef44c99dd5b5","name":"auth-mw","func":"const jwt = global.get(\"jwt\");\nconst secret = global.get(\"jwtSecret\");\nconst users = global.get(\"users\") || [];\n\nconst authHeader = msg.req.headers.authorization || msg.req.headers.Authorization || \"\";\nconst token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : null;\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"missing_token\" };\n    return [null, msg];\n}\n\ntry {\n    const decoded = jwt.verify(token, secret);\n    const user = users.find(u => u.uuid === decoded.uuid);\n    if (!user) {\n        msg.statusCode = 401;\n        msg.payload = { error: \"invalid_token\" };\n        return [null, msg];\n    }\n    msg.user = user;\n    return [msg, null];\n} catch(e) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"invalid_token\" };\n    return [null, msg];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":380,"y":540,"wires":[["fn-models"],["ad4ac02a4e27cbdb"]]},{"id":"ad4ac02a4e27cbdb","type":"http response","z":"4d2cef44c99dd5b5","name":"Unauthorized","statusCode":"","headers":{},"x":570,"y":600,"wires":[]},{"id":"cc701bb638327e3c","type":"function","z":"4d2cef44c99dd5b5","name":"auth-mw","func":"const jwt = global.get(\"jwt\");\nconst secret = global.get(\"jwtSecret\");\nconst users = global.get(\"users\") || [];\n\nconst authHeader = msg.req.headers.authorization || msg.req.headers.Authorization || \"\";\nconst token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : null;\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"missing_token\" };\n    return [null, msg];\n}\n\ntry {\n    const decoded = jwt.verify(token, secret);\n    const user = users.find(u => u.uuid === decoded.uuid);\n    if (!user) {\n        msg.statusCode = 401;\n        msg.payload = { error: \"invalid_token\" };\n        return [null, msg];\n    }\n    msg.user = user;\n    return [msg, null];\n} catch(e) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"invalid_token\" };\n    return [null, msg];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":380,"y":420,"wires":[["fn-colors"],["bbe439cf96cb0951"]]},{"id":"bbe439cf96cb0951","type":"http response","z":"4d2cef44c99dd5b5","name":"Unauthorized","statusCode":"","headers":{},"x":570,"y":480,"wires":[]},{"id":"34279054f8b0a7b8","type":"function","z":"4d2cef44c99dd5b5","name":"root-mw","func":"const jwt = global.get(\"jwt\");\nconst secret = global.get(\"jwtSecret\");\nconst users = global.get(\"users\") || [];\n\nconst authHeader = msg.req.headers.authorization || msg.req.headers.Authorization || \"\";\nconst token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : null;\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"missing_token\" };\n    return [null, msg];\n}\n\ntry {\n    const decoded = jwt.verify(token, secret);\n    const user = users.find(u => u.uuid === decoded.uuid);\n    if (!user || !user.isRoot) {\n        msg.statusCode = 401;\n        msg.payload = { error: \"invalid_token\" };\n        return [null, msg];\n    }\n    msg.user = user;\n    return [msg, null];\n} catch(e) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"invalid_token\" };\n    return [null, msg];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":360,"y":840,"wires":[["f4df5b7746317cac"],["c34f9470f9289aa5"]]},{"id":"c34f9470f9289aa5","type":"http response","z":"4d2cef44c99dd5b5","name":"Unauthorized","statusCode":"","headers":{},"x":550,"y":900,"wires":[]},{"id":"ab36a5b11951a335","type":"function","z":"4d2cef44c99dd5b5","name":"root-mw","func":"const jwt = global.get(\"jwt\");\nconst secret = global.get(\"jwtSecret\");\nconst users = global.get(\"users\") || [];\n\nconst authHeader = msg.req.headers.authorization || msg.req.headers.Authorization || \"\";\nconst token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : null;\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"missing_token\" };\n    return [null, msg];\n}\n\ntry {\n    const decoded = jwt.verify(token, secret);\n    const user = users.find(u => u.uuid === decoded.uuid);\n    if (!user || !user.isRoot) {\n        msg.statusCode = 401;\n        msg.payload = { error: \"invalid_token\" };\n        return [null, msg];\n    }\n    msg.user = user;\n    return [msg, null];\n} catch(e) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"invalid_token\" };\n    return [null, msg];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":360,"y":960,"wires":[["9fd5383d259d2898"],["b245353948254b77"]]},{"id":"b245353948254b77","type":"http response","z":"4d2cef44c99dd5b5","name":"Unauthorized","statusCode":"","headers":{},"x":550,"y":1020,"wires":[]},{"id":"4d82a99cf72e1cf7","type":"function","z":"4d2cef44c99dd5b5","name":"root-mw","func":"const jwt = global.get(\"jwt\");\nconst secret = global.get(\"jwtSecret\");\nconst users = global.get(\"users\") || [];\n\nconst authHeader = msg.req.headers.authorization || msg.req.headers.Authorization || \"\";\nconst token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : null;\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"missing_token\" };\n    return [null, msg];\n}\n\ntry {\n    const decoded = jwt.verify(token, secret);\n    const user = users.find(u => u.uuid === decoded.uuid);\n    if (!user || !user.isRoot) {\n        msg.statusCode = 401;\n        msg.payload = { error: \"invalid_token\" };\n        return [null, msg];\n    }\n    msg.user = user;\n    return [msg, null];\n} catch(e) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"invalid_token\" };\n    return [null, msg];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":360,"y":1080,"wires":[["706c9901b957fe7d"],["51d3ec624122c386"]]},{"id":"51d3ec624122c386","type":"http response","z":"4d2cef44c99dd5b5","name":"Unauthorized","statusCode":"","headers":{},"x":550,"y":1140,"wires":[]},{"id":"5839d8e37699fa83","type":"function","z":"4d2cef44c99dd5b5","name":"root-mw","func":"const jwt = global.get(\"jwt\");\nconst secret = global.get(\"jwtSecret\");\nconst users = global.get(\"users\") || [];\n\nconst authHeader = msg.req.headers.authorization || msg.req.headers.Authorization || \"\";\nconst token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : null;\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"missing_token\" };\n    return [null, msg];\n}\n\ntry {\n    const decoded = jwt.verify(token, secret);\n    const user = users.find(u => u.uuid === decoded.uuid);\n    if (!user || !user.isRoot) {\n        msg.statusCode = 401;\n        msg.payload = { error: \"invalid_token\" };\n        return [null, msg];\n    }\n    msg.user = user;\n    return [msg, null];\n} catch(e) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"invalid_token\" };\n    return [null, msg];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":380,"y":1200,"wires":[["2aa752f25f999e78"],["24d77e88170447df"]]},{"id":"24d77e88170447df","type":"http response","z":"4d2cef44c99dd5b5","name":"Unauthorized","statusCode":"","headers":{},"x":570,"y":1260,"wires":[]},{"id":"bda69905b14ce419","type":"function","z":"4d2cef44c99dd5b5","name":"auth-mw","func":"const jwt = global.get(\"jwt\");\nconst secret = global.get(\"jwtSecret\");\nconst users = global.get(\"users\") || [];\n\nconst authHeader = msg.req.headers.authorization || msg.req.headers.Authorization || \"\";\nconst token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : null;\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"missing_token\" };\n    return [null, msg];\n}\n\ntry {\n    const decoded = jwt.verify(token, secret);\n    const user = users.find(u => u.uuid === decoded.uuid);\n    if (!user) {\n        msg.statusCode = 401;\n        msg.payload = { error: \"invalid_token\" };\n        return [null, msg];\n    }\n    msg.user = user;\n    return [msg, null];\n} catch(e) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"invalid_token\" };\n    return [null, msg];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":1420,"wires":[["ee01ca5666bc041c"],["7b5c9de46393d460"]]},{"id":"7b5c9de46393d460","type":"http response","z":"4d2cef44c99dd5b5","name":"Unauthorized","statusCode":"","headers":{},"x":600,"y":1480,"wires":[]},{"id":"ee01ca5666bc041c","type":"function","z":"4d2cef44c99dd5b5","name":"Get Vehicles","func":"const vehicles = global.get(\"vehicles\") || [];\nmsg.payload = vehicles;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":570,"y":1420,"wires":[["3c4498b4fc1b51e1"]]},{"id":"3c4498b4fc1b51e1","type":"http response","z":"4d2cef44c99dd5b5","name":"Return Vehicles","statusCode":"","headers":{},"x":760,"y":1420,"wires":[]},{"id":"158ee5f49125acb4","type":"function","z":"4d2cef44c99dd5b5","name":"auth-mw","func":"const jwt = global.get(\"jwt\");\nconst secret = global.get(\"jwtSecret\");\nconst users = global.get(\"users\") || [];\n\nconst authHeader = msg.req.headers.authorization || msg.req.headers.Authorization || \"\";\nconst token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : null;\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"missing_token\" };\n    return [null, msg];\n}\n\ntry {\n    const decoded = jwt.verify(token, secret);\n    const user = users.find(u => u.uuid === decoded.uuid);\n    if (!user) {\n        msg.statusCode = 401;\n        msg.payload = { error: \"invalid_token\" };\n        return [null, msg];\n    }\n    msg.user = user;\n    return [msg, null];\n} catch(e) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"invalid_token\" };\n    return [null, msg];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":1540,"wires":[["f0b5c3a697d7462f"],["1bc68b1c0e5b61ac"]]},{"id":"1bc68b1c0e5b61ac","type":"http response","z":"4d2cef44c99dd5b5","name":"Unauthorized","statusCode":"","headers":{},"x":600,"y":1600,"wires":[]},{"id":"f0b5c3a697d7462f","type":"function","z":"4d2cef44c99dd5b5","name":"Post Vehicles","func":"const fs = global.get(\"fs\");\nconst path = global.get(\"path\");\nconst uuidv4 = global.get(\"uuidv4\");\nconst uploadsDir = global.get(\"uploadsDir\");\nconst BASE_URL = global.get(\"BASE_URL\");\n\nconst models = global.get(\"models\") || [];\nconst colors = global.get(\"colors\") || [];\n\nconst body = msg.req.body || {};\nconst files = msg.req.files || [];\n\nlet fileUrl = null;\n\nif (files.length > 0) {\n    const file = files[0];\n    if (!fs.existsSync(uploadsDir)) fs.mkdirSync(uploadsDir, { recursive: true });\n\n    const fileName = `${Date.now()}_${file.originalname}`;\n    const filePath = path.join(uploadsDir, fileName);\n\n    fs.writeFileSync(filePath, file.buffer);\n    fileUrl = `${BASE_URL}/uploads/${fileName}`;\n}\n\nconst model = models.find(m => m.uuid === body.modelUuid) || null;\nconst color = colors.find(c => c.uuid === body.colorUuid) || null;\n\nconst vehicle = {\n    uuid: uuidv4(),\n    creationDate: new Date(),\n    updatedDate: new Date(),\n    creationUserName: msg.req.user || \"root\",\n    updatedUserName: msg.req.user || \"root\",\n    year: Number(body.year),\n    imagePath: fileUrl,\n    model: model ? { uuid: model.uuid, modelName: model.modelName } : { uuid: body.modelUuid, modelName: null },\n    color: color ? { uuid: color.uuid, colorName: color.colorName } : { uuid: body.colorUuid, colorName: null }\n};\n\nconst vehicles = global.get(\"vehicles\") || [];\nvehicles.push(vehicle);\nglobal.set(\"vehicles\", vehicles);\n\nmsg.statusCode = 201;\nmsg.payload = vehicle;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":580,"y":1540,"wires":[["38c4d49539f01f46"]]},{"id":"38c4d49539f01f46","type":"http response","z":"4d2cef44c99dd5b5","name":"Return Vehicles","statusCode":"","headers":{},"x":780,"y":1540,"wires":[]},{"id":"532a5dac423dd288","type":"http in","z":"4d2cef44c99dd5b5","name":"GET Vehicles","url":"/vehicles","method":"get","upload":false,"skipBodyParsing":false,"swaggerDoc":"","x":230,"y":1420,"wires":[["bda69905b14ce419"]]},{"id":"637c0dacef4071b4","type":"http in","z":"4d2cef44c99dd5b5","name":"POST Vehicles","url":"/vehicles","method":"post","upload":true,"skipBodyParsing":false,"swaggerDoc":"","x":240,"y":1540,"wires":[["158ee5f49125acb4"]]},{"id":"88af013210c7b471","type":"function","z":"4d2cef44c99dd5b5","name":"auth-mw","func":"const jwt = global.get(\"jwt\");\nconst secret = global.get(\"jwtSecret\");\nconst users = global.get(\"users\") || [];\n\nconst authHeader = msg.req.headers.authorization || msg.req.headers.Authorization || \"\";\nconst token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : null;\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"missing_token\" };\n    return [null, msg];\n}\n\ntry {\n    const decoded = jwt.verify(token, secret);\n    const user = users.find(u => u.uuid === decoded.uuid);\n    if (!user) {\n        msg.statusCode = 401;\n        msg.payload = { error: \"invalid_token\" };\n        return [null, msg];\n    }\n    msg.user = user;\n    return [msg, null];\n} catch(e) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"invalid_token\" };\n    return [null, msg];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":1680,"wires":[["f343fb5724e9783c"],["7a5bc4523ebc1e05"]]},{"id":"7a5bc4523ebc1e05","type":"http response","z":"4d2cef44c99dd5b5","name":"Unauthorized","statusCode":"","headers":{},"x":600,"y":1740,"wires":[]},{"id":"f343fb5724e9783c","type":"function","z":"4d2cef44c99dd5b5","name":"Get Vehicle ID","func":"const uuid = msg.req.params.uuid;\nconst vehicles = global.get(\"vehicles\") || [];\nconst vehicle = vehicles.find(v => v.uuid === uuid);\n\nif (!vehicle) {\n    msg.statusCode = 404;\n    msg.payload = { error: \"not_found\" };\n    return msg;\n}\n\nmsg.payload = vehicle;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":580,"y":1680,"wires":[["9509a314efa6514d"]]},{"id":"9509a314efa6514d","type":"http response","z":"4d2cef44c99dd5b5","name":"Return Vehicles","statusCode":"","headers":{},"x":780,"y":1680,"wires":[]},{"id":"de4d86d454aaabdb","type":"http in","z":"4d2cef44c99dd5b5","name":"GET Vehicle ID","url":"/vehicles/:uuid","method":"get","upload":false,"skipBodyParsing":false,"swaggerDoc":"","x":240,"y":1680,"wires":[["88af013210c7b471"]]},{"id":"745e0a1015483995","type":"function","z":"4d2cef44c99dd5b5","name":"auth-mw","func":"const jwt = global.get(\"jwt\");\nconst secret = global.get(\"jwtSecret\");\nconst users = global.get(\"users\") || [];\n\nconst authHeader = msg.req.headers.authorization || msg.req.headers.Authorization || \"\";\nconst token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : null;\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"missing_token\" };\n    return [null, msg];\n}\n\ntry {\n    const decoded = jwt.verify(token, secret);\n    const user = users.find(u => u.uuid === decoded.uuid);\n    if (!user) {\n        msg.statusCode = 401;\n        msg.payload = { error: \"invalid_token\" };\n        return [null, msg];\n    }\n    msg.user = user;\n    return [msg, null];\n} catch(e) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"invalid_token\" };\n    return [null, msg];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":1800,"wires":[["e6e4233fbc07eb02"],["6d7d53e35ca2d45c"]]},{"id":"6d7d53e35ca2d45c","type":"http response","z":"4d2cef44c99dd5b5","name":"Unauthorized","statusCode":"","headers":{},"x":600,"y":1860,"wires":[]},{"id":"e6e4233fbc07eb02","type":"function","z":"4d2cef44c99dd5b5","name":"Put Vehicle ID","func":"const uuid = msg.req.params.uuid;\nconst body = msg.req.body || {};\nlet vehicles = global.get(\"vehicles\") || [];\nconst idx = vehicles.findIndex(v => v.uuid === uuid);\n\nif (idx === -1) {\n    msg.statusCode = 404;\n    msg.payload = { error: \"not_found\" };\n    return msg;\n}\n\nconst vehicle = vehicles[idx];\n\nif (body.modelUuid) {\n    const models = global.get(\"models\") || [];\n    const model = models.find(m => m.uuid === body.modelUuid);\n    if (model) vehicle.model = model;\n}\n\nif (body.colorUuid) {\n    const colors = global.get(\"colors\") || [];\n    const color = colors.find(c => c.uuid === body.colorUuid);\n    if (color) vehicle.color = color;\n}\n\nif (body.year) vehicle.year = body.year;\nif (body.imagePath) vehicle.imagePath = body.imagePath;\n\nvehicle.updatedDate = new Date().toISOString();\nvehicle.updatedUserName = msg.user.name;\n\nvehicles[idx] = vehicle;\nglobal.set(\"vehicles\", vehicles);\n\nmsg.payload = vehicle;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":580,"y":1800,"wires":[["48f336a11a375ebe"]]},{"id":"48f336a11a375ebe","type":"http response","z":"4d2cef44c99dd5b5","name":"Return Vehicles","statusCode":"","headers":{},"x":780,"y":1800,"wires":[]},{"id":"8d222fd9784466d4","type":"http in","z":"4d2cef44c99dd5b5","name":"PUT Vehicle ID","url":"/vehicles/:uuid","method":"put","upload":false,"skipBodyParsing":false,"swaggerDoc":"","x":240,"y":1800,"wires":[["745e0a1015483995"]]},{"id":"640bc9c6c0789533","type":"function","z":"4d2cef44c99dd5b5","name":"auth-mw","func":"const jwt = global.get(\"jwt\");\nconst secret = global.get(\"jwtSecret\");\nconst users = global.get(\"users\") || [];\n\nconst authHeader = msg.req.headers.authorization || msg.req.headers.Authorization || \"\";\nconst token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : null;\n\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"missing_token\" };\n    return [null, msg];\n}\n\ntry {\n    const decoded = jwt.verify(token, secret);\n    const user = users.find(u => u.uuid === decoded.uuid);\n    if (!user) {\n        msg.statusCode = 401;\n        msg.payload = { error: \"invalid_token\" };\n        return [null, msg];\n    }\n    msg.user = user;\n    return [msg, null];\n} catch(e) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"invalid_token\" };\n    return [null, msg];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":1920,"wires":[["6bb6173ae9dbb245"],["b130c0975440ebec"]]},{"id":"b130c0975440ebec","type":"http response","z":"4d2cef44c99dd5b5","name":"Unauthorized","statusCode":"","headers":{},"x":620,"y":1980,"wires":[]},{"id":"6bb6173ae9dbb245","type":"function","z":"4d2cef44c99dd5b5","name":"Delete Vehicle ID","func":"const uuid = msg.req.params.uuid;\nlet vehicles = global.get(\"vehicles\") || [];\nconst idx = vehicles.findIndex(v => v.uuid === uuid);\n\nif (idx === -1) {\n    msg.statusCode = 404;\n    msg.payload = { error: \"not_found\" };\n    return msg;\n}\n\nvehicles.splice(idx, 1);\nglobal.set(\"vehicles\", vehicles);\n\nmsg.payload = { ok: true };\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":610,"y":1920,"wires":[["0a3a499250cf18e3"]]},{"id":"0a3a499250cf18e3","type":"http response","z":"4d2cef44c99dd5b5","name":"Return Vehicles","statusCode":"","headers":{},"x":800,"y":1920,"wires":[]},{"id":"0d9d7fbcb8e3d4a2","type":"http in","z":"4d2cef44c99dd5b5","name":"DELETE Vehicle ID","url":"/vehicles/:uuid","method":"delete","upload":false,"skipBodyParsing":false,"swaggerDoc":"","x":250,"y":1920,"wires":[["640bc9c6c0789533"]]},{"id":"multipart_decoder","type":"multipart-decoder","z":"4d2cef44c99dd5b5","name":"Decode multipart","url":"api/vehicles","tls":"","authentication":"none","delay":"0","maximum":"10485760","blockSize":"1","enableLog":"on","x":410,"y":2120,"wires":[["vehicle_function"],["404ca7b16aff7e5c"]]},{"id":"vehicle_function","type":"function","z":"4d2cef44c99dd5b5","name":"Process Vehicle","func":"// msg.parts contém todos os campos do formData\nconst parts = msg.parts;\n\nconst vehicle = {};\n\n// Processar campos de texto\nfor (let field in parts) {\n    if (parts[field].type === 'text') {\n        vehicle[field] = parts[field].data;\n    }\n}\n\n// Processar arquivo\nif (parts.image && parts.image.type === 'file') {\n    const fs = global.get('fs') || require('fs');\n    const path = global.get('path') || require('path');\n    \n    const uploadsDir = path.resolve(__dirname, '../.nodered/uploads');\n    if (!fs.existsSync(uploadsDir)) fs.mkdirSync(uploadsDir);\n\n    const fileName = Date.now() + '_' + parts.image.filename;\n    const filePath = path.join(uploadsDir, fileName);\n\n    fs.writeFileSync(filePath, parts.image.data);\n    vehicle.imagePath = '/uploads/' + fileName;\n}\n\nmsg.payload = { success: true, vehicle };\nreturn msg;","outputs":1,"noerr":0,"x":620,"y":2120,"wires":[["http_response"]]},{"id":"http_response","type":"http response","z":"4d2cef44c99dd5b5","name":"HTTP Response","statusCode":"","headers":{},"x":810,"y":2120,"wires":[]},{"id":"404ca7b16aff7e5c","type":"http response","z":"4d2cef44c99dd5b5","name":"HTTP Response","statusCode":"","headers":{},"x":600,"y":2180,"wires":[]},{"id":"122653b01723eb4d","type":"http in","z":"4d2cef44c99dd5b5","name":"POST Vehicles","url":"/vehicles/v2","method":"post","upload":false,"skipBodyParsing":false,"swaggerDoc":"","x":200,"y":2120,"wires":[["multipart_decoder"]]}]